
<?php
if ($this->markerclusterer) {
    $GLOBALS['TL_JAVASCRIPT'][] = 'bundles/storelocator/markerclusterer.min.js';
}
?>
<script>
    var map;
    var markerImages = {};
    var markersUpdating = false;

    var markers = {
        <?php foreach( $this->entries as $entry): ?>
            "<?= $entry->id; ?>": {"id": "<?= $entry->id; ?>","pid": "<?= $entry->pid; ?>",
                "lng": "<?= $entry->longitude; ?>","lat": "<?= $entry->latitude; ?>",
                "info": <?= $entry->info; ?>},
        <?php endforeach; ?>
    };

    function initMapMarker() {

        markerImages = {
            <?php foreach( $this->mapPins as $key => $value ): ?>
            "<?= $key; ?>" : {
                "url": "<?= $value; ?>",
                "scaledSize": new google.maps.Size(36, 36),
                "origin": new google.maps.Point(0, 0),
                "anchor": new google.maps.Point(18, 36)
            },
            <?php endforeach; ?>
        };

        for( var id in markers ) {
            addMarker(markers[id]);
        }

        fitMapToMarkers();

        <?php if( $this->loadMoreResults ): ?>
        setTimeout(function(){
            map.addListener('zoom_changed', updateMarkers);
            map.addListener('dragend', updateMarkers);
            map.addListener('tilt_changed', updateMarkers);
        },500);
        <?php endif; ?>
    }

    function addMarker( item ) {

        if( item.id in markers && "position" in markers[item.id] ) {
            return;
        }

        if( Object.keys(markers).length > 500 ) {
            return;
        }

        var markerImage;

        if( item.pid in markerImages ) {

            markerImage = markerImages[item.pid];

        } else {

            if( 'default' in markerImages ) {
                markerImage = markerImages['default'];
            }
        }

        marker = new google.maps.Marker({
            position: new google.maps.LatLng(item.lat, item.lng),
            map: map,
            icon: markerImage,
            draggable: false,
            data: item,
            infoWindow: new google.maps.InfoWindow({
                content: item.info
            })
        });

        markers[item.id] = marker;

    <?php if( in_array($this->mapInteraction , ["showMarkerInfo", "scrollToListElement"]) ): ?>
        marker.addListener('click', function(){

            <?php if( $this->mapInteraction == "showMarkerInfo" ): ?>
                for( var id in markers ) {
                    if( "infoWindow" in markers[id] ) {
                        markers[id].infoWindow.close();
                    }
                }
                markers[this.data.id].infoWindow.open(map, markers[this.data.id]);
            <?php elseif( $this->mapInteraction == "scrollToListElement" ): ?>
                document.location.hash = "#result_"+this.data.id;
            <?php endif;?>
        });
    <?php endif;?>
    }

    function fitMapToMarkers() {

        var bounds = new google.maps.LatLngBounds();

        for( var i in markers ) {
           bounds.extend(markers[i].getPosition());
        }

        map.fitBounds(bounds);
        map.setZoom(map.getZoom()-1);

        if( map.getZoom() > 15 ) {
            map.setZoom(15);
        }
    }

    <?php if( $this->loadMoreResults ): ?>
    function updateMarkers() {

        if( Object.keys(markers).length > 500 || markersUpdating ) {
            return;
        }

        var bounds = map.getBounds();

        if( !(bounds instanceof google.maps.LatLngBounds) ) {
            return;
        }

        var sw = bounds.getSouthWest();
        var ne = bounds.getNorthEast();

        var xhr = new XMLHttpRequest();

        var params = {
            'action': 'getMarkers',
            'fromlat': sw.lat(),
            'tolat': ne.lat(),
            'fromlng': sw.lng(),
            'tolng': ne.lng(),
            'REQUEST_TOKEN': "{{request_token}}"
        };

        var url = location.protocol + '//' + location.host + location.pathname + '?' + Object.keys(params).map(function(key){
            return key+"="+encodeURIComponent(params[key])
        }).join("&");

        xhr.onload = function () {

            if( xhr.status >= 200 && xhr.status < 300 ) {

                var response = JSON.parse(xhr.response);

                if( response ) {

                    for( var i in response ) {
                        addMarker(response[i]);
                    }
                }
            }

            markersUpdating = false;
        };

        xhr.open('GET', url);
        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
        xhr.send();

        markersUpdating = true;
    }
    <?php endif;?>

    function mapInViewport() {

        var rect = map.getDiv().getBoundingClientRect();

        return (
            rect.top >= 0 &&
            rect.left >= 0 &&
            rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
            rect.right <= (window.innerWidth || document.documentElement.clientWidth)
        );
    }

    function initializeGoogleMap() {

        var mapOptions = {
            minZoom: 4,
            maxZoom: 20,
            zoom: 8,
        };

        map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);

    <?php if( $this->listInteraction == "scrollToMapAndCenterMarker" ): ?>
        var entries = document.querySelectorAll('.mod_storelocator_list .entry');

        if( entries ) {

            for( var i=0; i<entries.length; i++ ) {

                entries[i].addEventListener('click',function(){

                    // scroll to map (if necessary)
                    if( !mapInViewport() ) {
                        document.location.hash = "";
                        document.location.hash = "#map-wrapper";
                    }

                    var markerID = this.id.split("_")[1];

                    if( markerID in markers ) {
                        map.setCenter(markers[markerID].getPosition());
                        map.setZoom(15);
                    }
                });
            }
        }
    <?php endif; ?>

        initMapMarker();
    <?php if( $this->markerclusterer ): ?>
        new MarkerClusterer(map, markers, {
            imagePath:
              "bundles/storelocator/marker",
        });
    <?php endif; ?>
    }
    <?php if( $this->loadedMapsApi ): ?>
        var busyWait = function() {
            if( typeof google !== "undefined" && typeof google.maps !== "undefined" && typeof google.maps.Map !== "undefined" ) {
                initializeGoogleMap();
            } else {
                setTimeout(busyWait,300);
            }
        };
        setTimeout(busyWait,300);
    <?php endif; ?>

</script>

<?php if( !$this->loadedMapsApi ): ?>
<script src="https://maps.googleapis.com/maps/api/js?key=<?= $this->mapsKey; ?>&amp;callback=initializeGoogleMap" async defer></script>
<?php endif; ?>
